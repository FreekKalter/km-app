# HTTPS server

server {
	listen 443 ssl;
	server_name km-app.kalteronline.org;

	root /var/www;
	index index.html index.htm;

    # This is for the server side certificate (signed by start_ssl)
    # and encrypts the connection and gets the green little lock in the browser
	ssl_certificate 	        /etc/nginx/conf/ssl-unified.crt;
	ssl_certificate_key 	    /etc/nginx/conf/server.key;

    # This is selfsigned certififcate pair for client-side authentication
    # and is completely seperate from the server-side certificate
    # this one is only used for authentication of the client (as a replacement for usernama/password)
    ssl_client_certificate      /etc/nginx/conf/client.ca.crt;
    ssl_verify_client           optional;

	ssl_dhparam 	 	        /etc/nginx/conf/dhparam.pem;
	ssl_session_timeout         10m;
    ssl_session_cache           shared:SSL:10m;

	ssl_protocols TLSv1.2;
	ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:!ECDHE-ECDSA-AES128-GCM-SHA256:!ECDHE-RSA-AES256-GCM-SHA384:!ECDHE-ECDSA-AES256-GCM-SHA384:!DHE-RSA-AES128-GCM-SHA256:!DHE-DSS-AES128-GCM-SHA256:!kEDH+AESGCM:!ECDHE-RSA-AES128-SHA256:!ECDHE-ECDSA-AES128-SHA256:!ECDHE-RSA-AES128-SHA:!ECDHE-ECDSA-AES128-SHA:!ECDHE-RSA-AES256-SHA384:!ECDHE-ECDSA-AES256-SHA384:!ECDHE-RSA-AES256-SHA:!ECDHE-ECDSA-AES256-SHA:!DHE-RSA-AES128-SHA256:!DHE-RSA-AES128-SHA:!DHE-DSS-AES128-SHA256:!DHE-RSA-AES256-SHA256:!DHE-DSS-AES256-SHA:!DHE-RSA-AES256-SHA:!AES128-GCM-SHA256:!AES256-GCM-SHA384:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!3DES!MD5:!RC4:!PSK';
	ssl_prefer_server_ciphers on;

	add_header Strict-Transport-Security max-age=15768000;

    gzip            on;
    gzip_proxied    any;
    gzip_types      *;
    #gzip_comp_level 8;

    location /js/ {
        include /etc/nginx/client_auth.conf;
        root /static;
    }

    location /css/ {
        include /etc/nginx/client_auth.conf;
        root /static;
    }

    location /partials/ {
        include /etc/nginx/client_auth.conf;
        root /static;
    }

    location /img/ {
        root /static;
    }

    location / {
        include /etc/nginx/client_auth.conf;
        proxy_pass http://backend;

        # not necessary in this case because there is only one client and unauthenticated connections
        # gets terminated before the location blocks. If we want to implement different users
        # uncomment below and handle the VERIFIED field in the webapp to authenticate users.
        #proxy_set_header VERIFIED "";
        #proxy_set_header VERIFIED $ssl_client_verify;
        #-----
    }
}
##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# http://wiki.nginx.org/Pitfalls
# http://wiki.nginx.org/QuickStart
# http://wiki.nginx.org/Configuration

